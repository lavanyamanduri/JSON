package com.bridgelabz.AddressController;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.map.JsonMappingException;

import com.bridgelabz.AddressModel.Address;
import com.bridgelabz.AddressModel.AddressBookModel;
import com.bridgelabz.AddressModel.Person;
import com.bridgelabz.AddressRepository.JsonUtil;

public class AddressBookDemo {
	public static void main(String[] args) throws JsonParseException, JsonMappingException, IOException {
		AddressBookModel model = new AddressBookModel();

		String path = "/home/admin1/eclipse-workspace/BridgeLabzFellowshipPrograms/src/com/bridgelabz/jsonfiles/addressbookout.json";

		ArrayList<Person> persons = new ArrayList<Person>();

		// adding person

		Person person = new Person();
		Person person2 = new Person();

		person.setFirstname("lavanya");
		person.setLastname("manduri");
		Address address = new Address();
		address.setCity("vizag");
		address.setState("AP");
		address.setZip(530013);
		person.setAddressObj(address);
		long mobile = 989898989;
		person.setMobile(mobile);

		person2.setFirstname("sai");
		person2.setLastname("manduri");
		Address address2 = new Address();
		address2.setCity("vizag");
		address2.setState("AP");
		address2.setZip(530016);
		person2.setAddressObj(address2);
		person2.setMobile((long) 987654321);

		persons.add(person);
		persons.add(person2);

		model.setPersons(persons);
		
		Scanner s=new Scanner(System.in);
		System.out.println("Enter Persons mobile number you want to edit:");
		Long search = s.nextLong();
		int indexOfPerson = 0;
		boolean isFoundPerson = false;
		for (int i = 0; i < persons.size(); i++) {
			if (search == persons.get(i).getMobile()) {
				isFoundPerson = true;
				indexOfPerson = i;
				System.out.println("Person found");
				break;
			}
		}

		if (isFoundPerson) {
			persons.get(indexOfPerson).getAddressObj().setCity("new panve");
			persons.get(indexOfPerson).getAddressObj().setZip(410207);
			persons.get(indexOfPerson).setMobile((long) 1234567890);
			;
			System.out.println("Edit completed");
		} else
			System.out.println("Person not found");

		// delete person

		// commenting because dont want to delete now

//		System.out.println("Enter Persons mobile number you want to delete:");
//		search = OOPsUtility.stringScanner();
//		
//		for (int i = 0; i < persons.size(); i++) {
//			if (search.equals(persons.get(i).getMobile())) {
//				isFoundPerson = true;
//				indexOfPerson = i;
//				System.out.println("Person found");
//				break;
//			}
//		}
//		
//		if (isFoundPerson) {
//			persons.remove(indexOfPerson);
//			System.out.println("Person deleted");
//		}else
//			System.out.println("Person not found");

		// sorting by last name

		for (int i = 0; i < persons.size() - 1; i++) {
			for (int j = 0; j < persons.size() - i - 1; j++) {

				if (persons.get(j).getLastname().compareTo(persons.get(j + 1).getLastname()) > 0) {
					Object temp = persons.get(j);
					persons.set(j, persons.get(j + 1));
					persons.set(j + 1, (Person) temp);

				}
			}
		}
		model.setPersons(persons);

		// sorting by zip

		for (int i = 0; i < persons.size() - 1; i++) {
			for (int j = 0; j < persons.size() - i - 1; j++) {

				if (persons.get(j).getAddressObj().getZip() > persons.get(j + 1).getAddressObj().getZip()) {
					Object temp = persons.get(j);
					persons.set(j, persons.get(j + 1));
					persons.set(j + 1, (Person) temp);

				}
			}
		}
		model.setPersons(persons);

		JsonUtil.writeMapper(path, model);

	}
}
